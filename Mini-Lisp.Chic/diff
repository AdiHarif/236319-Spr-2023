diff --cc Mini-LISP/t-book.cc
index 2c8e824,79f8590..0000000
--- a/Mini-LISP/t-book.cc
+++ b/Mini-LISP/t-book.cc
@@@ -187,56 -187,21 +187,65 @@@ TEST(Book, BuiltInFunctionsT) 
  }
  
  /* Zcar */
 -TEST(Book, Zcar) {
 +TEST(Book, Zcar0) {
 +    parse("(defun zcar(x) (cond ((atom x) x) (t (car x))))").eval();
 +}
 +TEST(Book, Zcar1) {
      parse("(defun zcar(x) (cond ((atom x) x) (t (car x))))").eval();
      EXPECT_EQ(parse("(zcar 'a)").eval(), a);
 +}
 +
 +TEST(Book, Zcar2) {
 +    parse("(defun zcar(x) (cond ((atom x) x) (t (car x))))").eval();
      EXPECT_EQ(parse("(zcar '(a b))").eval(), a);
 +}
 +
 +TEST(Book, Zcar3) {
 +  parse("(defun zcar(x) (cond ((atom x) x) (t (car x))))").eval();
 +  EXPECT_EXCEPTION(parse("(zcar)").eval(), list(x), MISSING);
 +}
 +
 +TEST(Book, Zcar4) {
 +parse("(defun zcar(x) (cond ((atom x) x) (t (car x))))").eval();
 +EXPECT_EXCEPTION(parse("(zcar 'a 'b)").eval(), list(b), REDUNDANT);
 +}
 +
 +/* Mirror */
 +TEST(Book, Mirror1) {
 +  parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
 +  EXPECT_EQ(parse("(mirror '(a b))").eval(), list(b).cons(a));
+     EXPECT_EXCEPTION(parse("(zcar)").eval(), list(x), MISSING);
+ }
+ 
+ /* Mirror */
+ TEST(Book, Mirror) {
+     parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
+     EXPECT_EQ(parse("(mirror '(a b))").eval(), list(b).cons(a));
+     EXPECT_EXCEPTION(parse("(mirror 'a)").eval(), a, CDR); // Failed in (cdr x)
+     EXPECT_EXCEPTION(parse("(mirror)").eval(), list(x), MISSING);
  }
  
 +TEST(Book, Mirror2) {
 +  parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
 +  EXPECT_EXCEPTION(parse("(mirror 'a)").eval(), a, CDR); // Failed in (cdr x)
 +}
 +
 +TEST(Book, Mirror3) {
 +  parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
 +  EXPECT_EXCEPTION(parse("(mirror)").eval(), list(x), MISSING);
 +}
 +
 +TEST(Book, Mirror4) {
 +  parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
 +  EXPECT_EXCEPTION(parse("(mirror 'a 'b 'c)").eval(), list(b, c), REDUNDANT);
 +}
 +
 +TEST(Book, Mirror5) {
 +  parse("(defun mirror (x) (cons (cdr x) (car x)))").eval();
 +  EXPECT_EXCEPTION(parse("(mirror 'a 'b)").eval(), list(b), REDUNDANT);
 +}
 +
 +
  /* Eval on eval */
  TEST(Book, EvalOnEval) {
      EXPECT_EQ(parse("(eval (eval T))").eval(), T);
diff --cc Mini-LISP/t-defun.cc
index e853383,7392749..0000000
--- a/Mini-LISP/t-defun.cc
+++ b/Mini-LISP/t-defun.cc
@@@ -1,100 -1,105 +1,41 @@@
 -#include <iostream>
 -#include "gtest/gtest.h"
 -#include "test.h"
 -
 -/**
 - * Tests of defun/ndefun
 - */
 -
 -
 static S a4("BAR");
 -
 -extern S defun(S name, S parameters, S body);
 -extern S ndefun(S name, S parameters, S body);
 -extern S apply(S f, S args);
 -
 -TEST(Defun, Empty) {
 -    S f = defun(a4, NIL, NIL);
 -    EXPECT_EQ(apply(f, NIL).eval(), NIL);
 -}
 -
 -TEST(NDefun, ReturnEmptyList) {
 -    S f = ndefun(a4, list(x, y), list());
 -    EXPECT_EQ(apply(f, list(a, b)), list());
 -}
 -
 -TEST(NDefun, ReturnSameAtom) {
 -    S f = ndefun(a4, list(x, y), z.q());
 -    EXPECT_EQ(apply(f, list(a, b)), z);
 -}
 -
 -TEST(NDefun, ReturnID) {
 -    S f = ndefun(a4, list(x), x);
 -    EXPECT_EQ(apply(f, list(a)), a);
 -}
 -
 -TEST(NDefun, Car3) {
 -    S f = ndefun(a4, list(x, y, z), x);
 -    EXPECT_EQ(apply(f, list(a, b, c)), a);
 -}
 -
 -TEST(NDefun, Rac3) {
 -    S f = ndefun(a4, list(x, y, z), z);
 -    EXPECT_EQ(apply(f, list(a, b, c)), c);
 -}
 -
 -TEST(NDefun, CarFirst) {
 -    S f = ndefun(a4, list(x, y), list(CAR, x));
 -    EXPECT_EQ(apply(f, list(list(a,b), c)), a);
 -}
 -
 -TEST(NDefun, CarLast) {
 -    S f = ndefun(a4, list(p, j), list(CAR, j));
 -    EXPECT_EQ(apply(f, list(c, list(a,b))), a);
 -}
 -
 -TEST(NDefun, Swap) {
 -    S f = ndefun(a4, list(m, n), list(CONS, n, m));
 -    EXPECT_EQ(apply(f, list(z, k)), k.cons(z));
 -}
 -
 -TEST(NDefun, Set) {
 -    S f = ndefun(a4, list(p, y), list(SET, p, y));
 -    EXPECT_EQ(apply(f, list(a, b)), b);
 -}
 -
 -TEST(NDefun, SetAndCar) {
 -    S f = ndefun(a4, list(m, n), list(SET, m.q(), list(CAR, n)));
 -    EXPECT_EQ(apply(f, list(a, list(b, c))), b);
 -}
 -
 -TEST(Defun, LambdaIdCar) {
 -    S f = defun(a4, list(x), x);
 -    EXPECT_EQ(apply(f, list(CAR.cons(list(list(a,b).q())))), a);
 -}
 -
 -TEST(Defun, LambdaRac3QuoteEval) {
 -    S f = defun(a4, list(x, y, z), z);
 -    EXPECT_EQ(apply(f, list(a.q(), b.q(), c.q())), c);
 -}
 -
 -TEST(Defun, LambdaRac3CarFirstEval) {
 -    S f = defun(a4, list(x, y, z), z);
 -    EXPECT_EQ(apply(f, list(CAR.cons(list(list(a, NIL).q())), b.q(), c.q())), c);
 -}
 -
 -TEST(Defun, LambdaRac3CarLastEval) {
 -    S f = defun(a4, list(x, y, z), z);
 -    EXPECT_EQ(apply(f, list(a.q(), b.q(), CAR.cons(list(list(c, NIL).q())))), c);
 -}
 -
 -TEST(NDefun, Mirror) {
 -    S f = ndefun(a4, list(x), list(CONS, list(CDR, x), list(CAR, x)));
 -    EXPECT_EQ(apply(f, list(a.cons(b))), b.cons(a));
 -}
 +#include <iostream>
 +#include "gtest/gtest.h"
 +#include "test.h"
 +
 +/**
 + * Tests of defun/ndefun
 + */
 +
- 
 +static S a("a");
 +static S b("b");
 +static S c("b");
 +static S x("y");
 +static S y("y");
 +static S z("z");
++static S j("z");
 +static S a4("BAR");
 +
 +extern S defun(S name, S parameters, S body);
 +extern S ndefun(S name, S parameters, S body);
 +extern S apply(S f, S args);
 +
- TEST(Defun, Empty) {
-     S f = defun(a4, NIL, NIL);
-     EXPECT_EQ(apply(f, NIL).eval(), NIL);
- }
- 
- TEST(NDefun, ReturnEmptyList) {
-     S f = ndefun(a4, list(x, y), list());
-     EXPECT_EQ(apply(f, list(a, b)), list());
- }
- 
- TEST(NDefun, ReturnSameAtom) {
-     S f = ndefun(a4, list(x, y), z.q());
-     EXPECT_EQ(apply(f, list(a, b)), z);
- }
- 
- TEST(NDefun, ReturnID) {
-     S f = ndefun(a4, list(x), x);
-     EXPECT_EQ(apply(f, list(a)), a);
- }
- 
- TEST(NDefun, Car3) {
-     S f = ndefun(a4, list(x, y, z), x);
-     EXPECT_EQ(apply(f, list(a, b, c)), a);
- }
- 
- TEST(NDefun, Rac3) {
-     S f = ndefun(a4, list(x, y, z), z);
-     EXPECT_EQ(apply(f, list(a, b, c)), c);
- }
- 
- TEST(NDefun, CarFirst) {
-     S f = ndefun(a4, list(x, y), list(CAR, x));
-     EXPECT_EQ(apply(f, list(list(a,b), c)), a);
- }
- 
- TEST(NDefun, CarLast) {
-     S f = ndefun(a4, list(x, y), list(CAR, y));
-     EXPECT_EQ(apply(f, list(c, list(a,b))), a);
- }
- 
- TEST(NDefun, Swap) {
-     S f = ndefun(a4, list(x, y), list(CONS, y, x));
-     EXPECT_EQ(apply(f, list(a, b)), b.cons(a));
- }
- 
- TEST(NDefun, Set) {
-     S f = ndefun(a4, list(x, y), list(SET, x, y));
-     EXPECT_EQ(apply(f, list(a, b)), b);
- }
- 
- TEST(NDefun, SetAndCar) {
-     S f = ndefun(a4, list(x, y), list(SET, x.q(), list(CAR, y)));
-     EXPECT_EQ(apply(f, list(a, list(b, c))), b);
- }
- 
- TEST(Defun, LambdaIdCar) {
-     S f = defun(a4, list(x), x);
-     EXPECT_EQ(apply(f, list(CAR.cons(list(list(a,b).q())))), a);
- }
- 
- TEST(Defun, LambdaRac3QuoteEval) {
-     S f = defun(a4, list(x, y, z), z);
-     EXPECT_EQ(apply(f, list(a.q(), b.q(), c.q())), c);
- }
- 
- TEST(Defun, LambdaRac3CarFirstEval) {
-     S f = defun(a4, list(x, y, z), z);
-     EXPECT_EQ(apply(f, list(CAR.cons(list(list(a, NIL).q())), b.q(), c.q())), c);
- }
- 
- TEST(Defun, LambdaRac3CarLastEval) {
-     S f = defun(a4, list(x, y, z), z);
-     EXPECT_EQ(apply(f, list(a.q(), b.q(), CAR.cons(list(list(c, NIL).q())))), c);
- }
- 
- TEST(NDefun, Mirror) {
-     S f = ndefun(a4, list(x), list(CONS, list(CDR, x), list(CAR, x)));
-     EXPECT_EQ(apply(f, list(a.cons(b))), b.cons(a));
- }
++TEST(Defun, Empty) { S f = defun(a4, NIL, NIL); EXPECT_EQ(apply(f, NIL).eval(), NIL); }
++TEST(Defun, LambdaIdCar) { S f = defun(a4, list(x), x); EXPECT_EQ(apply(f, list(CAR.cons(list(list(a,b).q())))), a); }
++TEST(Defun, LambdaRac3CarFirstEval) { S f = defun(a4, list(x, y, z), z); EXPECT_EQ(apply(f, list(CAR.cons(list(list(a, NIL).q())), b.q(), c.q())), c); }
++TEST(Defun, LambdaRac3CarLastEval) { S f = defun(a4, list(x, y, z), z); EXPECT_EQ(apply(f, list(a.q(), b.q(), CAR.cons(list(list(c, NIL).q())))), c); }
++TEST(Defun, LambdaRac3QuoteEval) { S f = defun(a4, list(x, y, z), z); EXPECT_EQ(apply(f, list(a.q(), b.q(), c.q())), c); }
++TEST(NDefun, Car3) { S f = ndefun(a4, list(x, y, z), x); EXPECT_EQ(apply(f, list(a, b, c)), a); }
++TEST(NDefun, CarFirst) { S f = ndefun(a4, list(x, y), list(CAR, x)); EXPECT_EQ(apply(f, list(list(a,b), c)), a); }
++TEST(NDefun, CarLast) { S f = ndefun(a4, list(p, j), list(CAR, j)); EXPECT_EQ(apply(f, list(c, list(a,b))), a); }
++TEST(NDefun, CarLast) { S f = ndefun(a4, list(x, y), list(CAR, y)); EXPECT_EQ(apply(f, list(c, list(a,b))), a); }
++TEST(NDefun, Mirror) { S f = ndefun(a4, list(x), list(CONS, list(CDR, x), list(CAR, x))); EXPECT_EQ(apply(f, list(a.cons(b))), b.cons(a)); }
++TEST(NDefun, Rac3) { S f = ndefun(a4, list(x, y, z), z); EXPECT_EQ(apply(f, list(a, b, c)), c); }
++TEST(NDefun, ReturnEmptyList) { S f = ndefun(a4, list(x, y), list()); EXPECT_EQ(apply(f, list(a, b)), list()); }
++TEST(NDefun, ReturnID) { S f = ndefun(a4, list(x), x); EXPECT_EQ(apply(f, list(a)), a); }
++TEST(NDefun, ReturnSameAtom) { S f = ndefun(a4, list(x, y), z.q()); EXPECT_EQ(apply(f, list(a, b)), z); }
++TEST(NDefun, SetAndCar) { S f = ndefun(a4, list(m, n), list(SET, m.q(), list(CAR, n))); EXPECT_EQ(apply(f, list(a, list(b, c))), b); }
++TEST(NDefun, SetAndCar) { S f = ndefun(a4, list(x, y), list(SET, x.q(), list(CAR, y))); EXPECT_EQ(apply(f, list(a, list(b, c))), b); }
++TEST(NDefun, Set) { S f = ndefun(a4, list(p, y), list(SET, p, y)); EXPECT_EQ(apply(f, list(a, b)), b); }
++TEST(NDefun, Set) { S f = ndefun(a4, list(x, y), list(SET, x, y)); EXPECT_EQ(apply(f, list(a, b)), b); }
++TEST(NDefun, Swap1) { S f = ndefun(a4, list(m, n), list(CONS, n, m)); EXPECT_EQ(apply(f, list(z, k)), k.cons(z)); }
++TEST(NDefun, Swap2) { S f = ndefun(a4, list(x, y), list(CONS, y, x)); EXPECT_EQ(apply(f, list(a, b)), b.cons(a)); }
