; =================================================
; evaluate-atomic - 1 argument functions:
; =================================================
(evaluate-atomic '(atom a NIL) '(a.x t.t nil.nil))      ; T
(evaluate-atomic '(atom a NIL) '(a.(x) t.t nil.nil))    ; NIL
(evaluate-atomic '(car a NIL) '(a.(x) t.t nil.nil))     ; X
(evaluate-atomic '(car a NIL) '(a.(x y z) t.t nil.nil)) ; X
(evaluate-atomic '(car a NIL) '(a.(x.y) t.t nil.nil))   ; X.Y
(evaluate-atomic '(cdr a NIL) '(a.(x) t.t nil.nil))     ; NIL
(evaluate-atomic '(cdr a NIL) '(a.(x y z) t.t nil.nil)) ; (Y Z)
(evaluate-atomic '(cdr a NIL) '(a.(x.y) t.t nil.nil))   ; NIL

; =================================================
; evaluate-atomic - 2 argument functions:
; =================================================
(evaluate-atomic '(cons a b) '(a.x b.y t.t nil.nil))  ; (X.Y)
(evaluate-atomic '(cons a b) '(a.x b.x t.t nil.nil))  ; (X.X)
(evaluate-atomic '(eq a a) '(a.x t.t nil.nil))        ; T
(evaluate-atomic '(eq a b) '(a.x b.y t.t nil.nil))    ; NIL
(evaluate-atomic '(eq a b) '(a.x b.x t.t nil.nil))    ; T
(evaluate-atomic '(set a b) '(a.x b.y t.t nil.nil))   ; Y

; =================================================
; evaluate-atomic - cond:
; =================================================
; TODO

; =================================================
; evaluate-atomic - Errors:
; =================================================
(evaluate-atomic '(bla a b) '(a.x b.y t.t nil.nil))   ; error
